                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.8.0 #10562 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module _fslt
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl ___fslt
                             12 ;--------------------------------------------------------
                             13 ; special function registers
                             14 ;--------------------------------------------------------
                             15 ;--------------------------------------------------------
                             16 ; ram data
                             17 ;--------------------------------------------------------
                             18 	.area _DATA
                             19 ;--------------------------------------------------------
                             20 ; ram data
                             21 ;--------------------------------------------------------
                             22 	.area _INITIALIZED
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area _DABS (ABS)
                             27 ;--------------------------------------------------------
                             28 ; global & static initialisations
                             29 ;--------------------------------------------------------
                             30 	.area _HOME
                             31 	.area _GSINIT
                             32 	.area _GSFINAL
                             33 	.area _GSINIT
                             34 ;--------------------------------------------------------
                             35 ; Home
                             36 ;--------------------------------------------------------
                             37 	.area _HOME
                     0000    38 	G$__fslt$0$0	= .
                             39 	.globl	G$__fslt$0$0
                     0000    40 	C$_fslt.c$54$0_0$2	= .
                             41 	.globl	C$_fslt.c$54$0_0$2
                             42 ;_fslt.c:54: char __fslt (float a1, float a2)
                             43 ;	---------------------------------
                             44 ; Function __fslt
                             45 ; ---------------------------------
   0000                      46 ___fslt::
   0000 DD E5         [15]   47 	push	ix
   0002 DD 21 00 00   [14]   48 	ld	ix,#0
   0006 DD 39         [15]   49 	add	ix,sp
   0008 21 F4 FF      [10]   50 	ld	hl, #-12
   000B 39            [11]   51 	add	hl, sp
   000C F9            [ 6]   52 	ld	sp, hl
                     000D    53 	C$_fslt.c$58$1_0$2	= .
                             54 	.globl	C$_fslt.c$58$1_0$2
                             55 ;_fslt.c:58: fl1.f = a1;
   000D 21 04 00      [10]   56 	ld	hl, #0x0004
   0010 39            [11]   57 	add	hl, sp
   0011 EB            [ 4]   58 	ex	de, hl
   0012 21 10 00      [10]   59 	ld	hl, #0x0010
   0015 39            [11]   60 	add	hl, sp
   0016 01 04 00      [10]   61 	ld	bc, #0x0004
   0019 ED B0         [21]   62 	ldir
                     001B    63 	C$_fslt.c$59$1_0$2	= .
                             64 	.globl	C$_fslt.c$59$1_0$2
                             65 ;_fslt.c:59: fl2.f = a2;
   001B 21 00 00      [10]   66 	ld	hl, #0x0000
   001E 39            [11]   67 	add	hl, sp
   001F EB            [ 4]   68 	ex	de, hl
   0020 21 14 00      [10]   69 	ld	hl, #0x0014
   0023 39            [11]   70 	add	hl, sp
   0024 01 04 00      [10]   71 	ld	bc, #0x0004
   0027 ED B0         [21]   72 	ldir
                     0029    73 	C$_fslt.c$61$1_0$2	= .
                             74 	.globl	C$_fslt.c$61$1_0$2
                             75 ;_fslt.c:61: if (((fl1.l | fl2.l) & 0x7FFFFFFF) == 0)
   0029 21 04 00      [10]   76 	ld	hl, #0x0004
   002C 39            [11]   77 	add	hl, sp
   002D EB            [ 4]   78 	ex	de, hl
   002E 21 08 00      [10]   79 	ld	hl, #0x0008
   0031 39            [11]   80 	add	hl, sp
   0032 EB            [ 4]   81 	ex	de, hl
   0033 01 04 00      [10]   82 	ld	bc, #0x0004
   0036 ED B0         [21]   83 	ldir
   0038 21 00 00      [10]   84 	ld	hl, #0x0000
   003B 39            [11]   85 	add	hl, sp
   003C 4E            [ 7]   86 	ld	c, (hl)
   003D 23            [ 6]   87 	inc	hl
   003E 46            [ 7]   88 	ld	b, (hl)
   003F 23            [ 6]   89 	inc	hl
   0040 5E            [ 7]   90 	ld	e, (hl)
   0041 23            [ 6]   91 	inc	hl
   0042 56            [ 7]   92 	ld	d, (hl)
   0043 DD 7E FC      [19]   93 	ld	a, -4 (ix)
   0046 B1            [ 4]   94 	or	a, c
   0047 4F            [ 4]   95 	ld	c, a
   0048 DD 7E FD      [19]   96 	ld	a, -3 (ix)
   004B B0            [ 4]   97 	or	a, b
   004C 47            [ 4]   98 	ld	b, a
   004D DD 7E FE      [19]   99 	ld	a, -2 (ix)
   0050 B3            [ 4]  100 	or	a, e
   0051 6F            [ 4]  101 	ld	l, a
   0052 DD 7E FF      [19]  102 	ld	a, -1 (ix)
   0055 B2            [ 4]  103 	or	a, d
   0056 67            [ 4]  104 	ld	h, a
   0057 79            [ 4]  105 	ld	a, c
   0058 B7            [ 4]  106 	or	a,a
   0059 20 0D         [12]  107 	jr	NZ,00102$
   005B B0            [ 4]  108 	or	a,b
   005C 20 0A         [12]  109 	jr	NZ,00102$
   005E BF            [ 4]  110 	cp	a, a
   005F ED 6A         [15]  111 	adc	hl, hl
   0061 20 05         [12]  112 	jr	NZ,00102$
                     0063   113 	C$_fslt.c$62$1_0$2	= .
                            114 	.globl	C$_fslt.c$62$1_0$2
                            115 ;_fslt.c:62: return (0);
   0063 2E 00         [ 7]  116 	ld	l, #0x00
   0065 C3rF8r00      [10]  117 	jp	00110$
   0068                     118 00102$:
                     0068   119 	C$_fslt.c$64$1_0$2	= .
                            120 	.globl	C$_fslt.c$64$1_0$2
                            121 ;_fslt.c:64: if (fl1.l<0 && fl2.l<0) {
   0068 21 04 00      [10]  122 	ld	hl, #0x0004
   006B 39            [11]  123 	add	hl, sp
   006C 4E            [ 7]  124 	ld	c, (hl)
   006D 23            [ 6]  125 	inc	hl
   006E 46            [ 7]  126 	ld	b, (hl)
   006F 23            [ 6]  127 	inc	hl
   0070 5E            [ 7]  128 	ld	e, (hl)
   0071 23            [ 6]  129 	inc	hl
   0072 56            [ 7]  130 	ld	d, (hl)
   0073 CB 7A         [ 8]  131 	bit	7, d
   0075 28 49         [12]  132 	jr	Z,00106$
   0077 21 00 00      [10]  133 	ld	hl, #0x0000
   007A 39            [11]  134 	add	hl, sp
   007B 4E            [ 7]  135 	ld	c, (hl)
   007C 23            [ 6]  136 	inc	hl
   007D 46            [ 7]  137 	ld	b, (hl)
   007E 23            [ 6]  138 	inc	hl
   007F 5E            [ 7]  139 	ld	e, (hl)
   0080 23            [ 6]  140 	inc	hl
   0081 56            [ 7]  141 	ld	d, (hl)
   0082 CB 7A         [ 8]  142 	bit	7, d
   0084 28 3A         [12]  143 	jr	Z,00106$
                     0086   144 	C$_fslt.c$65$2_0$3	= .
                            145 	.globl	C$_fslt.c$65$2_0$3
                            146 ;_fslt.c:65: if (fl2.l < fl1.l)
   0086 21 00 00      [10]  147 	ld	hl, #0x0000
   0089 39            [11]  148 	add	hl, sp
   008A EB            [ 4]  149 	ex	de, hl
   008B 21 08 00      [10]  150 	ld	hl, #0x0008
   008E 39            [11]  151 	add	hl, sp
   008F EB            [ 4]  152 	ex	de, hl
   0090 01 04 00      [10]  153 	ld	bc, #0x0004
   0093 ED B0         [21]  154 	ldir
   0095 21 04 00      [10]  155 	ld	hl, #0x0004
   0098 39            [11]  156 	add	hl, sp
   0099 4E            [ 7]  157 	ld	c, (hl)
   009A 23            [ 6]  158 	inc	hl
   009B 46            [ 7]  159 	ld	b, (hl)
   009C 23            [ 6]  160 	inc	hl
   009D 5E            [ 7]  161 	ld	e, (hl)
   009E 23            [ 6]  162 	inc	hl
   009F 56            [ 7]  163 	ld	d, (hl)
   00A0 DD 7E FC      [19]  164 	ld	a, -4 (ix)
   00A3 91            [ 4]  165 	sub	a, c
   00A4 DD 7E FD      [19]  166 	ld	a, -3 (ix)
   00A7 98            [ 4]  167 	sbc	a, b
   00A8 DD 7E FE      [19]  168 	ld	a, -2 (ix)
   00AB 9B            [ 4]  169 	sbc	a, e
   00AC DD 7E FF      [19]  170 	ld	a, -1 (ix)
   00AF 9A            [ 4]  171 	sbc	a, d
   00B0 E2rB5r00      [10]  172 	jp	PO, 00139$
   00B3 EE 80         [ 7]  173 	xor	a, #0x80
   00B5                     174 00139$:
   00B5 F2rBCr00      [10]  175 	jp	P, 00104$
                     00B8   176 	C$_fslt.c$66$2_0$3	= .
                            177 	.globl	C$_fslt.c$66$2_0$3
                            178 ;_fslt.c:66: return (1);
   00B8 2E 01         [ 7]  179 	ld	l, #0x01
   00BA 18 3C         [12]  180 	jr	00110$
   00BC                     181 00104$:
                     00BC   182 	C$_fslt.c$67$2_0$3	= .
                            183 	.globl	C$_fslt.c$67$2_0$3
                            184 ;_fslt.c:67: return (0);
   00BC 2E 00         [ 7]  185 	ld	l, #0x00
   00BE 18 38         [12]  186 	jr	00110$
   00C0                     187 00106$:
                     00C0   188 	C$_fslt.c$70$1_0$2	= .
                            189 	.globl	C$_fslt.c$70$1_0$2
                            190 ;_fslt.c:70: if (fl1.l < fl2.l)
   00C0 21 04 00      [10]  191 	ld	hl, #0x0004
   00C3 39            [11]  192 	add	hl, sp
   00C4 EB            [ 4]  193 	ex	de, hl
   00C5 21 08 00      [10]  194 	ld	hl, #0x0008
   00C8 39            [11]  195 	add	hl, sp
   00C9 EB            [ 4]  196 	ex	de, hl
   00CA 01 04 00      [10]  197 	ld	bc, #0x0004
   00CD ED B0         [21]  198 	ldir
   00CF 21 00 00      [10]  199 	ld	hl, #0x0000
   00D2 39            [11]  200 	add	hl, sp
   00D3 4E            [ 7]  201 	ld	c, (hl)
   00D4 23            [ 6]  202 	inc	hl
   00D5 46            [ 7]  203 	ld	b, (hl)
   00D6 23            [ 6]  204 	inc	hl
   00D7 5E            [ 7]  205 	ld	e, (hl)
   00D8 23            [ 6]  206 	inc	hl
   00D9 56            [ 7]  207 	ld	d, (hl)
   00DA DD 7E FC      [19]  208 	ld	a, -4 (ix)
   00DD 91            [ 4]  209 	sub	a, c
   00DE DD 7E FD      [19]  210 	ld	a, -3 (ix)
   00E1 98            [ 4]  211 	sbc	a, b
   00E2 DD 7E FE      [19]  212 	ld	a, -2 (ix)
   00E5 9B            [ 4]  213 	sbc	a, e
   00E6 DD 7E FF      [19]  214 	ld	a, -1 (ix)
   00E9 9A            [ 4]  215 	sbc	a, d
   00EA E2rEFr00      [10]  216 	jp	PO, 00140$
   00ED EE 80         [ 7]  217 	xor	a, #0x80
   00EF                     218 00140$:
   00EF F2rF6r00      [10]  219 	jp	P, 00109$
                     00F2   220 	C$_fslt.c$71$1_0$2	= .
                            221 	.globl	C$_fslt.c$71$1_0$2
                            222 ;_fslt.c:71: return (1);
   00F2 2E 01         [ 7]  223 	ld	l, #0x01
   00F4 18 02         [12]  224 	jr	00110$
   00F6                     225 00109$:
                     00F6   226 	C$_fslt.c$72$1_0$2	= .
                            227 	.globl	C$_fslt.c$72$1_0$2
                            228 ;_fslt.c:72: return (0);
   00F6 2E 00         [ 7]  229 	ld	l, #0x00
   00F8                     230 00110$:
                     00F8   231 	C$_fslt.c$73$1_0$2	= .
                            232 	.globl	C$_fslt.c$73$1_0$2
                            233 ;_fslt.c:73: }
   00F8 DD F9         [10]  234 	ld	sp, ix
   00FA DD E1         [14]  235 	pop	ix
                     00FC   236 	C$_fslt.c$73$1_0$2	= .
                            237 	.globl	C$_fslt.c$73$1_0$2
                     00FC   238 	XG$__fslt$0$0	= .
                            239 	.globl	XG$__fslt$0$0
   00FC C9            [10]  240 	ret
                            241 	.area _HOME
                            242 ;--------------------------------------------------------
                            243 ; code
                            244 ;--------------------------------------------------------
                            245 	.area _CODE
                            246 	.area _CODE
                            247 	.area _INITIALIZER
                            248 	.area _CABS (ABS)
