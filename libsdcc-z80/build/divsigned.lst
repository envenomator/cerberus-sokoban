ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next), page 1.
Hexadecimal [16-Bits]



                              1 ;--------------------------------------------------------------------------
                              2 ;  divsigned.s
                              3 ;
                              4 ;  Copyright (C) 2000-2010, Michael Hope, Philipp Klaus Krause
                              5 ;
                              6 ;  This library is free software; you can redistribute it and/or modify it
                              7 ;  under the terms of the GNU General Public License as published by the
                              8 ;  Free Software Foundation; either version 2, or (at your option) any
                              9 ;  later version.
                             10 ;
                             11 ;  This library is distributed in the hope that it will be useful,
                             12 ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                             13 ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                             14 ;  GNU General Public License for more details.
                             15 ;
                             16 ;  You should have received a copy of the GNU General Public License 
                             17 ;  along with this library; see the file COPYING. If not, write to the
                             18 ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                             19 ;   MA 02110-1301, USA.
                             20 ;
                             21 ;  As a special exception, if you link this library with other files,
                             22 ;  some of which are compiled with SDCC, to produce an executable,
                             23 ;  this library does not by itself cause the resulting executable to
                             24 ;  be covered by the GNU General Public License. This exception does
                             25 ;  not however invalidate any other reasons why the executable file
                             26 ;   might be covered by the GNU General Public License.
                             27 ;--------------------------------------------------------------------------
                             28 
                             29 .area	_CODE
                             30 
                             31 .globl	__divsint
                             32 .globl	__divschar
                             33 
   0000                      34 __divsint:
   0000 F1            [10]   35         pop     af
   0001 E1            [10]   36         pop     hl
   0002 D1            [10]   37         pop     de
   0003 D5            [11]   38         push    de
   0004 E5            [11]   39         push    hl
   0005 F5            [11]   40         push    af
                             41 
   0006 C3 18 00      [10]   42         jp      __div16
                             43 
   0009                      44 __divschar:
   0009 21 03 00      [10]   45         ld      hl, #2+1
   000C 39            [11]   46         add     hl, sp
                             47 
   000D 5E            [ 7]   48         ld      e, (hl)
   000E 2B            [ 6]   49         dec     hl
   000F 6E            [ 7]   50         ld      l, (hl)
                             51 
   0010                      52 __div8::
   0010 7D            [ 4]   53         ld      a, l            ; Sign extend
   0011 07            [ 4]   54         rlca
   0012 9F            [ 4]   55         sbc     a,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next), page 2.
Hexadecimal [16-Bits]



   0013 67            [ 4]   56         ld      h, a
   0014                      57 __div_signexte::
   0014 7B            [ 4]   58         ld      a, e            ; Sign extend
   0015 07            [ 4]   59         rlca
   0016 9F            [ 4]   60         sbc     a,a
   0017 57            [ 4]   61         ld      d, a
                             62         ; Fall through to __div16
                             63 
                             64         ;; signed 16-bit division
                             65         ;;
                             66         ;; Entry conditions
                             67         ;;   HL = dividend
                             68         ;;   DE = divisor
                             69         ;;
                             70         ;; Exit conditions
                             71         ;;   HL = quotient
                             72         ;;   DE = remainder
                             73         ;;
                             74         ;; Register used: AF,B,DE,HL
   0018                      75 __div16::
                             76         ;; Determine sign of quotient by xor-ing high bytes of dividend
                             77         ;;  and divisor. Quotient is positive if signs are the same, negative
                             78         ;;  if signs are different
                             79         ;; Remainder has same sign as dividend
   0018 7C            [ 4]   80         ld      a, h            ; Get high byte of dividend
   0019 AA            [ 4]   81         xor     a, d            ; Xor with high byte of divisor
   001A 17            [ 4]   82         rla                     ; Sign of quotient goes into the carry
   001B 7C            [ 4]   83         ld      a, h            ; Get high byte of dividend
   001C F5            [11]   84         push    af              ; Save sign of both quotient and reminder
                             85 
                             86         ; Take absolute value of dividend
   001D 17            [ 4]   87         rla
   001E 30 06         [12]   88         jr      NC, .chkde      ; Jump if dividend is positive
   0020 97            [ 4]   89         sub     a, a            ; Substract dividend from 0
   0021 95            [ 4]   90         sub     a, l
   0022 6F            [ 4]   91         ld      l, a
   0023 9F            [ 4]   92         sbc     a, a            ; Propagate borrow (A=0xFF if borrow)
   0024 94            [ 4]   93         sub     a, h
   0025 67            [ 4]   94         ld      h, a
                             95 
                             96         ; Take absolute value of divisor
   0026                      97 .chkde:
   0026 CB 7A         [ 8]   98         bit     7, d
   0028 28 06         [12]   99         jr      Z, .dodiv       ; Jump if divisor is positive
   002A 97            [ 4]  100         sub     a, a            ; Subtract divisor from 0
   002B 93            [ 4]  101         sub     a, e
   002C 5F            [ 4]  102         ld      e, a
   002D 9F            [ 4]  103         sbc     a, a            ; Propagate borrow (A=0xFF if borrow)
   002E 92            [ 4]  104         sub     a, d
   002F 57            [ 4]  105         ld      d, a
                            106 
                            107         ; Divide absolute values
   0030                     108 .dodiv:
   0030 CD 00 00      [17]  109         call    __divu16
                            110 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next), page 3.
Hexadecimal [16-Bits]



   0033                     111 .fix_quotient:
                            112         ; Negate quotient if it is negative
   0033 F1            [10]  113         pop     af              ; recover sign of quotient
   0034 D0            [11]  114         ret	NC		; Jump if quotient is positive
   0035 47            [ 4]  115         ld      b, a
   0036 97            [ 4]  116         sub     a, a            ; Subtract quotient from 0
   0037 95            [ 4]  117         sub     a, l
   0038 6F            [ 4]  118         ld      l, a
   0039 9F            [ 4]  119         sbc     a, a            ; Propagate borrow (A=0xFF if borrow)
   003A 94            [ 4]  120         sub     a, h
   003B 67            [ 4]  121         ld      h, a
   003C 78            [ 4]  122         ld      a, b
   003D C9            [10]  123 	ret
                            124 
   003E                     125 __get_remainder::
                            126         ; Negate remainder if it is negative and move it into hl
   003E 17            [ 4]  127         rla
   003F EB            [ 4]  128 	ex	de, hl
   0040 D0            [11]  129         ret     NC              ; Return if remainder is positive
   0041 97            [ 4]  130         sub     a, a            ; Subtract remainder from 0
   0042 95            [ 4]  131         sub     a, l
   0043 6F            [ 4]  132         ld      l, a
   0044 9F            [ 4]  133         sbc     a, a             ; Propagate remainder (A=0xFF if borrow)
   0045 94            [ 4]  134         sub     a, h
   0046 67            [ 4]  135         ld      h, a
   0047 C9            [10]  136         ret
                            137 
