ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next), page 1.
Hexadecimal [16-Bits]



                              1 ;--------------------------------------------------------------------------
                              2 ;  divunsigned.s
                              3 ;
                              4 ;  Copyright (C) 2000-2012, Michael Hope, Philipp Klaus Krause, Marco Bodrato
                              5 ;
                              6 ;  This library is free software; you can redistribute it and/or modify it
                              7 ;  under the terms of the GNU General Public License as published by the
                              8 ;  Free Software Foundation; either version 2, or (at your option) any
                              9 ;  later version.
                             10 ;
                             11 ;  This library is distributed in the hope that it will be useful,
                             12 ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                             13 ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                             14 ;  GNU General Public License for more details.
                             15 ;
                             16 ;  You should have received a copy of the GNU General Public License 
                             17 ;  along with this library; see the file COPYING. If not, write to the
                             18 ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                             19 ;   MA 02110-1301, USA.
                             20 ;
                             21 ;  As a special exception, if you link this library with other files,
                             22 ;  some of which are compiled with SDCC, to produce an executable,
                             23 ;  this library does not by itself cause the resulting executable to
                             24 ;  be covered by the GNU General Public License. This exception does
                             25 ;  not however invalidate any other reasons why the executable file
                             26 ;   might be covered by the GNU General Public License.
                             27 ;--------------------------------------------------------------------------
                             28 
                             29         ;; Originally from GBDK by Pascal Felber.
                             30 
                             31 .area   _CODE
                             32 
                             33 .globl	__divuint
                             34 .globl	__divuchar
                             35 
   0000                      36 __divuint:
   0000 F1            [10]   37         pop     af
   0001 E1            [10]   38         pop     hl
   0002 D1            [10]   39         pop     de
   0003 D5            [11]   40         push    de
   0004 E5            [11]   41         push    hl
   0005 F5            [11]   42         push    af
                             43 
   0006 18 0A         [12]   44         jr      __divu16
                             45 
   0008                      46 __divuchar:
   0008 21 03 00      [10]   47         ld      hl,#2+1
   000B 39            [11]   48         add     hl,sp
                             49 
   000C 5E            [ 7]   50         ld      e,(hl)
   000D 2B            [ 6]   51         dec     hl
   000E 6E            [ 7]   52         ld      l,(hl)
                             53 
                             54         ;; Fall through
   000F                      55 __divu8::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next), page 2.
Hexadecimal [16-Bits]



   000F 26 00         [ 7]   56         ld      h,#0x00
   0011 54            [ 4]   57         ld      d,h
                             58         ; Fall through to __divu16
                             59 
                             60         ;; unsigned 16-bit division
                             61         ;;
                             62         ;; Entry conditions
                             63         ;;   HL = dividend
                             64         ;;   DE = divisor
                             65         ;;
                             66         ;; Exit conditions
                             67         ;;   HL = quotient
                             68         ;;   DE = remainder
                             69         ;;   carry = 0
                             70         ;;   If divisor is 0, quotient is set to "infinity", i.e HL = 0xFFFF.
                             71         ;;
                             72         ;; Register used: AF,B,DE,HL
   0012                      73 __divu16::
                             74         ;; Two algorithms: one assumes divisor <2^7, the second
                             75         ;; assumes divisor >=2^7; choose the applicable one.
   0012 7B            [ 4]   76         ld      a,e
   0013 E6 80         [ 7]   77         and     a,#0x80
   0015 B2            [ 4]   78         or      a,d
   0016 20 10         [12]   79         jr      NZ,.morethan7bits
                             80         ;; Both algorithms "rotate" 24 bits (H,L,A) but roles change.
                             81 
                             82         ;; unsigned 16/7-bit division
   0018                      83 .atmost7bits:
   0018 06 10         [ 7]   84         ld      b,#16           ; bits in dividend and possible quotient
                             85         ;; Carry cleared by AND/OR, this "0" bit will pass trough HL.[*]
   001A ED 6A         [15]   86         adc     hl,hl
   001C                      87 .dvloop7:
                             88         ;; HL holds both dividend and quotient. While we shift a bit from
                             89         ;;  MSB of dividend, we shift next bit of quotient in from carry.
                             90         ;; A holds remainder.
   001C 17            [ 4]   91         rla
                             92 
                             93         ;; If remainder is >= divisor, next bit of quotient is 1.  We try
                             94         ;;  to compute the difference.
   001D 93            [ 4]   95         sub     a,e
   001E 30 01         [12]   96         jr      NC,.nodrop7     ; Jump if remainder is >= dividend
   0020 83            [ 4]   97         add     a,e             ; Otherwise, restore remainder
                             98         ;; The add above sets the carry, because sbc a,e did set it.
   0021                      99 .nodrop7:
   0021 3F            [ 4]  100         ccf                     ; Complement borrow so 1 indicates a
                            101                                 ;  successful substraction (this is the
                            102                                 ;  next bit of quotient)
   0022 ED 6A         [15]  103         adc     hl,hl
   0024 10 F6         [13]  104         djnz    .dvloop7
                            105         ;; Carry now contains the same value it contained before
                            106         ;; entering .dvloop7[*]: "0" = valid result.
   0026 5F            [ 4]  107         ld      e,a             ; DE = remainder, HL = quotient
   0027 C9            [10]  108         ret
                            109 
   0028                     110 .morethan7bits:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next), page 3.
Hexadecimal [16-Bits]



   0028 06 09         [ 7]  111         ld      b,#9            ; at most 9 bits in quotient.
   002A 7D            [ 4]  112         ld      a,l             ; precompute the first 7 shifts, by
   002B 6C            [ 4]  113         ld      l,h             ;  doing 8
   002C 26 00         [ 7]  114         ld      h,#0
   002E CB 1D         [ 8]  115         rr      l               ;  undoing 1
   0030                     116 .dvloop:
                            117         ;; Shift next bit of quotient into bit 0 of dividend
                            118         ;; Shift next MSB of dividend into LSB of remainder
                            119         ;; A holds both dividend and quotient. While we shift a bit from
                            120         ;;  MSB of dividend, we shift next bit of quotient in from carry
                            121         ;; HL holds remainder
   0030 ED 6A         [15]  122         adc     hl,hl           ; HL < 2^(7+9), no carry, ever.
                            123 
                            124         ;; If remainder is >= divisor, next bit of quotient is 1. We try
                            125         ;;  to compute the difference.
   0032 ED 52         [15]  126         sbc     hl,de
   0034 30 01         [12]  127         jr      NC,.nodrop      ; Jump if remainder is >= dividend
   0036 19            [11]  128         add     hl,de           ; Otherwise, restore remainder
                            129 	;; The add above sets the carry, because sbc hl,de did set it.
   0037                     130 .nodrop:
   0037 3F            [ 4]  131         ccf                     ; Complement borrow so 1 indicates a
                            132                                 ;  successful substraction (this is the
                            133                                 ;  next bit of quotient)
   0038 17            [ 4]  134         rla
   0039 10 F5         [13]  135         djnz    .dvloop
                            136         ;; Take care of the ninth quotient bit! after the loop B=0.
   003B CB 10         [ 8]  137         rl      b               ; BA = quotient
                            138         ;; Carry now contains "0" = valid result.
   003D 50            [ 4]  139         ld      d,b
   003E 5F            [ 4]  140         ld      e,a             ; DE = quotient, HL = remainder
   003F EB            [ 4]  141         ex      de,hl           ; HL = quotient, DE = remainder
   0040 C9            [10]  142         ret
                            143 
